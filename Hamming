def Xor(num1,num2):
    if (num1==num2):
        return 0
    else:
        return 1
def bitsParidad(NumBit):
   Numpar=[]
   
   n2=0
   n3=0
   n4=0
  
   if NumBit==1:
        for ele in range(0,8):
            Numpar.append(2*ele+1)
           
     
   elif NumBit==2:
        while n2<16:
            for ele in range(0,4):
                if ele>1:
                    Numpar.append(n2)
                    
                    
                n2+=1
        
   elif NumBit==3:
        while n3<16: 
            for ele in range(0,8):
                if ele>3:
                    Numpar.append(n3)
                   
                   
                n3+=1
       
   elif NumBit==4:
        
        while n4<16: 
            for ele in range(0,16):
                if ele>7:
                    Numpar.append(n4)
                    
                   
                n4+=1
        
   elif NumBit==5:
       for ele in range(0,17):
           if ele>15:
                Numpar.append(ele)
       
   return Numpar
def addparidad(NumBin,Numpar,NumHam,paridad,num):
    i=0
    par=0
    largo=len(Numpar)
    posicion=(2**num)-1
    for cont in range(0,largo):
        if NumHam[int(Numpar[cont])]=="1":
            i+=1
    print(i)
        
    if paridad==1:
        if i%2==0:
            NumHam[posicion]="0"
        else:
            NumHam[posicion]="1"
    else:
        if i%2==0:
            NumHam[posicion]="1"
        else:
            NumHam[posicion]="0"
    return NumHam
    
    

def esqueleto(NumBin):
    NumHam=[]
    i=0
    for cont in range(0,17):
        if cont<2 or cont==3 or cont==7 or cont==15:
            NumHam.append("0")
        else:
            NumHam.append(NumBin[i])
            i+=1
    return NumHam
def ToHamming(NumBin,paridad):
    Numpar1=bitsParidad(1)
    print(Numpar1)
    Numpar2=bitsParidad(2)
    print(Numpar2)
    Numpar3=bitsParidad(3)
    print(Numpar3)
    Numpar4=bitsParidad(4)
    print(Numpar4)
    Numpar5=bitsParidad(5)
    print(Numpar5)
    NumHam=[]
    print("-1",NumHam)
    NumHam=esqueleto(NumBin)
    print("0",NumHam)
    contador_datos=0
    NumHam=addparidad(NumBin,Numpar1,NumHam,paridad,0)
   
    print("1",NumHam)
    NumHam=addparidad(NumBin,Numpar2,NumHam,paridad,1)
   
    print("2",NumHam)
    
   
    NumHam=addparidad(NumBin,Numpar3,NumHam,paridad,2)
    
    print("4",NumHam)
    NumHam=addparidad(NumBin,Numpar4,NumHam,paridad,3)
  
    print("6",NumHam)
    
    NumHam=addparidad(NumBin,Numpar5,NumHam,paridad,4)
   
    print("8",NumHam)
    return NumHam
def detectarerror(NumHam):
    Numpar1=bitsParidad(1)
    Numpar2=bitsParidad(2)
    Numpar3=bitsParidad(3)
    Numpar4=bitsParidad(4)
    Numpar5=bitsParidad(5)
    n=0
    l=Xor(NumHam[Numpar1[n]],NumHam[Numpar1[n+1]])
    n=2
    print("dato",n-1, l)
    while n<len(Numpar1):
        l=Xor(l,NumHam[Numpar1[n]])
        n+=1
        print("dato",n-1, l)
    print(l)
num="001010011100"       
NumHam=ToHamming(num,0)
cont=0
ham=""
while cont<len(NumHam):
    ham=ham+str(NumHam[cont])
    cont+=1
print(ham)
detectarerror(NumHam)
